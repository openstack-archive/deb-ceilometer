Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ceilometer (2013.1~g0+48d8f574e8-1) experimental; urgency=low
 .
   * Initial release (Closes: #693406).
Author: Thomas Goirand <zigo@debian.org>
Bug-Debian: http://bugs.debian.org/693406

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- ceilometer-2013.1~g0+48d8f574e8.orig/ceilometer/openstack/common/setup.py
+++ ceilometer-2013.1~g0+48d8f574e8/ceilometer/openstack/common/setup.py
@@ -137,7 +137,7 @@ def _get_git_next_version_suffix(branch_
         revno_prefix = "r"
     else:
         revno_prefix = ""
-    _run_shell_command("git fetch origin +refs/meta/*:refs/remotes/meta/*")
+    #_run_shell_command("git fetch origin +refs/meta/*:refs/remotes/meta/*")
     milestone_cmd = "git show meta/openstack/release:%s" % branch_name
     milestonever = _run_shell_command(milestone_cmd)
     if milestonever:
@@ -267,7 +267,7 @@ def get_cmdclass():
             # sdist.sdist is an old style class, can't use super()
             sdist.sdist.run(self)
 
-    cmdclass['sdist'] = LocalSDist
+    #cmdclass['sdist'] = LocalSDist
 
     # If Sphinx is installed on the box running setup.py,
     # enable setup.py to build the documentation, otherwise,
@@ -337,7 +337,7 @@ def get_git_branchname():
 def get_pre_version(projectname, base_version):
     """Return a version which is leading up to a version that will
        be released in the future."""
-    if os.path.isdir('.git'):
+    if False and os.path.isdir('.git'):
         current_tag = _get_git_current_tag()
         if current_tag is not None:
             version = current_tag
@@ -359,7 +359,7 @@ def get_post_version(projectname):
     revision if there is one, or tag plus number of additional revisions
     if the current revision has no tag."""
 
-    if os.path.isdir('.git'):
+    if False and os.path.isdir('.git'):
         version = _get_git_post_version()
         write_versioninfo(projectname, version)
         return version
